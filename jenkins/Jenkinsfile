    /* A file which configures our full Jenkins pipeline for DevOps Assessment 2 */

pipeline{

    agent any

    environment {

        FLASK_ENV = "production"

        TESTING_SECRET_KEY = credentials('TESTING_SECRET_KEY')
        DEV_SECRET_KEY = credentials('DEV_SECRET_KEY')
        PRODUCTION_SECRET_KEY = credentials('PRODUCTION_SECRET_KEY')

        FILES_DIRECTORY = "src/file_output/"
        PNG_DIRECTORY = "src/png_output/"
        MIDI_DIRECTORY = "src/midi_output/"

        PRODUCTION_DB = "production_melodie_db"
        PRODUCTION_DB_USERNAME = credentials('DB_USERNAME')
        PRODUCTION_DB_USERPASS = credentials('DB_USERPASS')
        PRODUCTION_DATABASE_ADDRESS = credentials('DB_ADDRESS')

        DEVELOPMENT_DB = "dev_melodie_db"
        DEVELOPMENT_DB_USERNAME = credentials('DB_USERNAME')
        DEVELOPMENT_DB_USERPASS = credentials('DB_USERPASS')
        DEVELOPMENT_DATABASE_ADDRESS = credentials('DB_ADDRESS')

        TESTING_DB = "dev_melodie_db"
        TESTING_DB_USERNAME = credentials('DB_USERNAME')
        TESTING_DB_USERPASS = credentials('DB_USERPASS')
        TESTING_DATABASE_ADDRESS = credentials('DB_ADDRESS')

        DOCKER_USERNAME = credentials('DOCKER_USERNAME')
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')

        SERVICE_1_URL = "http://melodie-stack_service1:5001"
        SERVICE_2_URL = "http://melodie-stack_service2:5002"
        SERVICE_3_URL = "http://melodie-stack_service3:5003"
        SERVICE_4_URL = "http://melodie-stack_service4:5004"

    }

    stages{

        stage('Configure our Test Environment'){
            steps{
                sh 'jenkins/scripts/configure_test_environment.sh'
            }
        }

        stage('Run Tests'){
            steps{

                withEnv(["FLASK_ENV=testing"]){

                    sh 'jenkins/scripts/run_test_service_1.sh'
                    sh 'jenkins/scripts/run_test_service_2.sh'
                    sh 'jenkins/scripts/run_test_service_3.sh'
                    sh 'jenkins/scripts/run_test_service_4.sh'

                }
            }
        }

        stage('Install Ansible'){
            steps{
                sh 'jenkins/scripts/install_ansible.sh'
            }
        }

        stage('Run Ansible Playbook'){
            steps{
                sh 'jenkins/scripts/run_ansible_playbook.sh'
            }
        }

        stage('Build Docker Images'){

            steps{
                withEnv(["FLASK_ENV=production"]){
                    sh 'jenkins/scripts/build_and_push_docker_images.sh'
                }
            }
        }

        stage('Deploy Swarm Stack'){

            steps{
                withEnv(["FLASK_ENV=production"]) {
                    sh 'jenkins/scripts/deploy_docker_swarm_stack.sh'
                }
            }
        }
    }

    post {

        always {
            echo 'One way or another, I have finished'

            chuckNorris()  // Chuck Norris. All Day, Every Day.

            // Junit test results.
            junit(testResults: "service1/src/tests/test_results/test_results_service1.xml, service2/src/tests/test_results/test_results_service2.xml, service3/src/tests/test_results/test_results_service3.xml, service4/src/tests/test_results/test_results_service4.xml")

            // Code coverage report.

            dir('service1/src/tests/test_results') {
                stash name: "s1_cov", includes: "test_cov_service1.xml"
            }
            dir('service2/src/tests/test_results') {
                stash name: "s2_cov", includes: "test_cov_service2.xml"
            }

            dir('service3/src/tests/test_results') {
                stash name: "s3_cov", includes: "test_cov_service3.xml"
            }

            dir('service4/src/tests/test_results') {
                stash name: "s4_cov", includes: "test_cov_service4.xml"
            }


            unstash 's1_cov';
            unstash 's2_cov';
            unstash 's3_cov';
            unstash 's4_cov';

            cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '*.xml', conditionalCoverageTargets: '70, 0, 0', enableNewApi: true, failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false

            // Old coverage report.
            // publishCoverage adapters: [coberturaAdapter(mergeToOneReport: true, path: 'service1/src/tests/test_results/test_cov_service1.xml, service2/src/tests/test_results/test_cov_service2.xml, service3/src/tests/test_results/test_cov_service3.xml, service4/src/tests/test_results/test_cov_service4.xml')], sourceFileResolver: sourceFiles('NEVER_STORE')

            recordIssues(
            healthy: 20,
            unhealthy: 50,
            tools: [pep8(pattern: 'service1/src/tests/test_results/service1_pep8_report.txt, service2/src/tests/test_results/service2_pep8_report.txt, service3/src/tests/test_results/service3_pep8_report.txt, service4/src/tests/test_results/service4_pep8_report.txt'),
                    pyLint(pattern: 'service1/src/tests/test_results/service1_pylint_report.log, service2/src/tests/test_results/service2_pylint_report.log, service3/src/tests/test_results/service3_pylint_report.log, service4/src/tests/test_results/service4_pylint_report.log')]
            )
        }


        success {
            echo 'This build was a success.'
        }

        unstable {
            echo 'This build is unstable.'
        }

        failure {
            echo 'This build failed.'
        }
    }
}